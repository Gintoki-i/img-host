name: Daily purge all images (CST)

on:
  schedule:
    - cron: "0 23 * * *"   # UTC 23:00 = 北京时间(UTC+8) 次日 07:00
  workflow_dispatch:

permissions:
  contents: write

env:
  IMAGEDIR: img
  TZ: Asia/Shanghai
  IMAGE_EXTS: >-
    jpg|jpeg|png|webp|gif|bmp|tiff|tif|svg|svgz|ico|avif|heic|heif|jp2|j2k|jpf|jpx|jpm|apng

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo on branch
        uses: actions/checkout@v4
        with:
          # 对 schedule：这是默认分支；对手动：就是你点运行时的分支
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configure Git
        run: |
          git config --global core.precomposeunicode true
          git config --global core.quotepath off
          git config --global pull.rebase true
          git config core.longpaths true

      - name: Purge tracked images (git rm)
        shell: bash
        run: |
          set -euo pipefail
          dir="$IMAGEDIR"
          exts="${IMAGE_EXTS}"
          mkdir -p "$dir"

          # 只处理 img/ 下已被 Git 跟踪的图片
          git ls-files -z "$dir" \
            | grep -ziE "\.(${exts})$" \
            | xargs -0r git rm -qf --ignore-unmatch

      - name: Purge untracked images (filesystem)
        shell: bash
        run: |
          set -euo pipefail
          dir="$IMAGEDIR"
          exts="${IMAGE_EXTS}"
          matched=0 deleted=0 failed=0

          while IFS= read -r -d '' f; do
            matched=$((matched+1))
            if rm -f -- "$f"; then
              deleted=$((deleted+1)); echo "Deleted: $f"
            else
              failed=$((failed+1));  echo "Failed:  $f"
            fi
          done < <(find -L "$dir" -type f -iregex ".*\.(${exts})$" -print0)

          echo "Matched images: $matched"
          echo "Deleted images: $deleted"
          echo "Failed to delete: $failed"

          # 清空空目录（保留 .gitkeep 等可选）
          find "$dir" -type d -empty -not -path '*/.git/*' -delete || true

      - name: Commit & push if changes
        shell: bash
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            BRANCH="${BRANCH:-${GITHUB_REF_NAME:-main}}"
          
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
            git add -A
            git commit -m "chore: purge all images under ${IMAGEDIR}"
          
            # 先抓远端并把我们刚提交的删改 rebase 到最新远端之上
            git fetch origin "$BRANCH"
            git rebase "origin/$BRANCH" || { echo "Rebase failed"; git rebase --abort; exit 1; }
          
            # 推到指定分支
            git push origin HEAD:"$BRANCH"
          else
            echo "No changes to commit."
          fi
